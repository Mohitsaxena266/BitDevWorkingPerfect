declare const NormalButtonComponent = "\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types'; // ES6\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-elements';\n\nclass NormalButton extends Component {\n  render() {\n    const { text, backgroundColor, width, height, style } = this.props;\n    return (\n      <Button\n        title={text.toUpperCase()}\n        raised={true}\n        onPress={() => this.props.onPress()}\n        buttonStyle={{\n          height,\n          width,\n          //borderRadius: width * 2,\n          //backgroundColor,\n          ...style,\n        }}\n      />\n    );\n  }\n}\n\nNormalButton.propTypes = {\n  text: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  onPress: PropTypes.func,\n  style: PropTypes.object,\n};\n\nNormalButton.defaultProps = {\n  text: 'Button',\n  backgroundColor: '#fafafa',\n  width: 120,\n  height: 50,\n  style: {},\n};\n\nexport default NormalButton;\n";
declare const CardComponent = "\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types'; // ES6\nimport { StyleSheet, Text, View, TouchableWithoutFeedback, Animated, Image } from 'react-native';\nimport backCardImage from '../assets/images/carte-dos-2.png';\n\nclass Card extends Component {\n  getColor = suit => {\n    if (suit === 'spades' || suit === 'clubs') {\n      return styles.black;\n    } else {\n      return styles.red;\n    }\n  };\n\n  getSuitSymbol = suit => {\n    /*\n     * spades \u2660\n     * clubs \u2663\n     * diamonds \u2666\n     * hearts \u2665\n     */\n    switch (suit) {\n      case 'spades':\n        return '\u2660';\n        break;\n      case 'clubs':\n        return '\u2663';\n        break;\n      case 'diamonds':\n        return '\u2666';\n        break;\n      case 'hearts':\n        return '\u2665';\n        break;\n      default:\n        return '';\n        break;\n    }\n  };\n\n  UNSAFE_componentWillMount() {\n    const hiddenValue = this.props.hidden ? 180 : 0;\n    this.animatedValue = new Animated.Value(hiddenValue);\n    this.value = hiddenValue;\n    this.animatedValue.addListener(({ value }) => {\n      this.value = value;\n    });\n    this.frontInterpolate = this.animatedValue.interpolate({\n      inputRange: [0, 180],\n      outputRange: ['0deg', '180deg'],\n    });\n    this.backInterpolate = this.animatedValue.interpolate({\n      inputRange: [0, 180],\n      outputRange: ['180deg', '360deg'],\n    });\n  }\n\n  flipCard() {\n    if (this.value >= 90) {\n      Animated.spring(this.animatedValue, {\n        toValue: 0,\n        friction: 8,\n        tension: 10,\n      }).start();\n    } else {\n      Animated.spring(this.animatedValue, {\n        toValue: 180,\n        friction: 8,\n        tension: 10,\n      }).start();\n    }\n  }\n\n  render() {\n    const frontAnimatedStyle = {\n      transform: [{ rotateY: this.frontInterpolate }],\n    };\n    const backAnimatedStyle = {\n      transform: [{ rotateY: this.backInterpolate }],\n    };\n    const { value, suit, hidden, style } = this.props;\n    const color = this.getColor(suit);\n    return (\n      <TouchableWithoutFeedback onPress={() => this.flipCard()}>\n        <View style={[styles.card, style]}>\n          <Animated.View style={[styles.flipCard, styles.flipCardFront, frontAnimatedStyle]}>\n            <Text style={[styles.valueText, color]}>{value}</Text>\n            <Text style={[styles.suitText, color]}>{this.getSuitSymbol(suit)}</Text>\n          </Animated.View>\n          <Animated.View style={[styles.flipCard, styles.flipCardBack, backAnimatedStyle]}>\n            <Image source={backCardImage} style={styles.backImage} />\n          </Animated.View>\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    width: 85,\n    height: 103.85,\n    shadowColor: 'black',\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0.8,\n    shadowRadius: 2,\n  },\n  flipCard: {\n    width: 85,\n    height: 103.85,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backfaceVisibility: 'hidden',\n    borderRadius: 8,\n  },\n  flipCardFront: {\n    backgroundColor: 'white',\n  },\n  flipCardBack: {\n    position: 'absolute',\n    top: 0,\n  },\n  backImage: {\n    width: '100%',\n    height: '100%',\n  },\n  suitText: {\n    fontSize: 62,\n    position: 'absolute',\n    bottom: 0,\n  },\n  valueText: {\n    position: 'absolute',\n    top: 5,\n    left: 8,\n    fontSize: 28,\n    fontWeight: 'bold',\n    textAlign: 'left',\n  },\n  black: {\n    color: 'black',\n  },\n  red: {\n    color: 'red',\n  },\n});\n\nCard.propTypes = {\n  value: PropTypes.string.isRequired,\n  suit: PropTypes.string.isRequired,\n  hidden: PropTypes.bool,\n  style: PropTypes.object,\n};\n\nCard.defaultProps = {\n  hidden: false,\n  style: {},\n};\n\nexport default Card;\n";
declare const InputComponent = "\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Text,\n  View,\n  TextInput,\n  Animated,\n  Easing,\n  Platform,\n  StyleSheet,\n} from 'react-native';\n\nimport { nodeType, renderNode, patchWebProps } from '../helpers';\nimport { fonts, withTheme, ViewPropTypes, TextPropTypes } from '../config';\n\nimport Icon from '../icons/Icon';\n\nconst renderText = (content, defaultProps, style) =>\n  renderNode(Text, content, {\n    ...defaultProps,\n    style: StyleSheet.flatten([style, defaultProps && defaultProps.style]),\n  });\n\nclass Input extends React.Component {\n  shakeAnimationValue = new Animated.Value(0);\n\n  focus() {\n    this.input.focus();\n  }\n\n  blur() {\n    this.input.blur();\n  }\n\n  clear() {\n    this.input.clear();\n  }\n\n  isFocused() {\n    return this.input.isFocused();\n  }\n\n  setNativeProps(nativeProps) {\n    this.input.setNativeProps(nativeProps);\n  }\n\n  shake = () => {\n    const { shakeAnimationValue } = this;\n\n    shakeAnimationValue.setValue(0);\n    // Animation duration based on Material Design\n    // https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations\n    Animated.timing(shakeAnimationValue, {\n      duration: 375,\n      toValue: 3,\n      ease: Easing.bounce,\n    }).start();\n  };\n\n  render() {\n    const {\n      containerStyle,\n      disabled,\n      disabledInputStyle,\n      inputContainerStyle,\n      leftIcon,\n      leftIconContainerStyle,\n      rightIcon,\n      rightIconContainerStyle,\n      inputComponent: InputComponent = TextInput,\n      inputStyle,\n      errorProps,\n      errorStyle,\n      errorMessage,\n      label,\n      labelStyle,\n      labelProps,\n      theme,\n      ...attributes\n    } = this.props;\n\n    const translateX = this.shakeAnimationValue.interpolate({\n      inputRange: [0, 0.5, 1, 1.5, 2, 2.5, 3],\n      outputRange: [0, -15, 0, 15, 0, -15, 0],\n    });\n\n    return (\n      <View style={StyleSheet.flatten([styles.container, containerStyle])}>\n        {renderText(\n          label,\n          { style: labelStyle, ...labelProps },\n          styles.label(theme)\n        )}\n\n        <Animated.View\n          style={StyleSheet.flatten([\n            styles.inputContainer(theme),\n            inputContainerStyle,\n            { transform: [{ translateX }] },\n          ])}\n        >\n          {leftIcon && (\n            <View\n              style={StyleSheet.flatten([\n                styles.iconContainer,\n                leftIconContainerStyle,\n              ])}\n            >\n              {renderNode(Icon, leftIcon)}\n            </View>\n          )}\n\n          <InputComponent\n            testID=\"RNE__Input__text-input\"\n            underlineColorAndroid=\"transparent\"\n            editable={!disabled}\n            {...patchWebProps(attributes)}\n            ref={ref => {\n              this.input = ref;\n            }}\n            style={StyleSheet.flatten([\n              styles.input,\n              inputStyle,\n              disabled && styles.disabledInput,\n              disabled && disabledInputStyle,\n            ])}\n          />\n\n          {rightIcon && (\n            <View\n              style={StyleSheet.flatten([\n                styles.iconContainer,\n                rightIconContainerStyle,\n              ])}\n            >\n              {renderNode(Icon, rightIcon)}\n            </View>\n          )}\n        </Animated.View>\n\n        {!!errorMessage && (\n          <Text\n            {...errorProps}\n            style={StyleSheet.flatten([\n              styles.error(theme),\n              errorStyle && errorStyle,\n            ])}\n          >\n            {errorMessage}\n          </Text>\n        )}\n      </View>\n    );\n  }\n}\n\nInput.propTypes = {\n  containerStyle: ViewPropTypes.style,\n  disabled: PropTypes.bool,\n  disabledInputStyle: TextPropTypes.style,\n  inputContainerStyle: ViewPropTypes.style,\n  leftIcon: nodeType,\n  leftIconContainerStyle: ViewPropTypes.style,\n  rightIcon: nodeType,\n  rightIconContainerStyle: ViewPropTypes.style,\n  inputStyle: TextPropTypes.style,\n  inputComponent: PropTypes.elementType,\n  errorProps: PropTypes.object,\n  errorStyle: TextPropTypes.style,\n  errorMessage: PropTypes.string,\n  label: PropTypes.node,\n  labelStyle: TextPropTypes.style,\n  labelProps: PropTypes.object,\n  theme: PropTypes.object,\n};\n\nconst styles = {\n  container: {\n    width: '100%',\n    paddingHorizontal: 10,\n  },\n  disabledInput: {\n    opacity: 0.5,\n  },\n  inputContainer: theme => ({\n    flexDirection: 'row',\n    borderBottomWidth: 1,\n    alignItems: 'center',\n    borderColor: theme.colors.grey3,\n  }),\n  iconContainer: {\n    height: 40,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginLeft: 15,\n  },\n  input: {\n    alignSelf: 'center',\n    color: 'black',\n    fontSize: 18,\n    flex: 1,\n    minHeight: 40,\n  },\n  error: theme => ({\n    margin: 5,\n    fontSize: 12,\n    color: theme.colors.error,\n  }),\n  label: theme => ({\n    fontSize: 16,\n    color: theme.colors.grey3,\n    ...Platform.select({\n      android: {\n        ...fonts.android.bold,\n      },\n      default: {\n        fontWeight: 'bold',\n      },\n    }),\n  }),\n};\n\nexport { Input };\nexport default withTheme(Input, 'Input');\n";
export { NormalButtonComponent, CardComponent, InputComponent };
